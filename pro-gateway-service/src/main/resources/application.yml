server:
  port: 8072
spring:
  redis:
    database: 0
    host: 192.168.30.199
    port: 6379
    password:
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        max-wait: -1ms
        min-idle: 0
    timeout: 10000
  rabbitmq:
    host: 192.168.30.199
    port: 5672
    username: admin
    password: admin
  application:
    name: gateway-service
  boot:
    admin:
      client:
        url: http://localhost:12001
  zipkin:
    base-url: http://localhost:10001
    sleuth:
      sampler:
      percentage: 1.0
    sender:
      type: rabbit
  cloud:        # spring cloud gateway 路由配置方式
    gateway:
      discovery:      #是否与服务发现组件进行结合，通过 serviceId(必须设置成大写) 转发到具体的服务实例。默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。
        locator:      #路由访问方式：http://Gateway_HOST:Gateway_PORT/大写的serviceId/**，其中微服务应用名默认大写访问。
          enabled: true
      routes:
      - id: USER-SERVICE-WEB                   #从注册中心获取服务
        uri: lb://USER-SERVICE-WEB
        predicates:
        - Path=/user/**
        filters:
        - StripPrefix=1
        # 熔断降级配置
        - name: Hystrix
          args:
            name : default
            fallbackUri: 'forward:/defaultfallback'
        - name: RequestRateLimiter
          args:
            # 使用SpEL名称引用Bean，与上面新建的RateLimiterConfig类中的bean的name相同
            key-resolver: '#{@remoteAddrKeyResolver}'
            # 每秒最大访问次数
            redis-rate-limiter.replenishRate: 20
            # 令牌桶最大容量
            redis-rate-limiter.burstCapacity: 20
        # hystrix 信号量隔离，3秒后自动超时
        hystrix:
          command:
            default:
              execution:
                isolation:
                  strategy: SEMAPHORE
                  thread:
                    timeoutInMilliseconds: 3000
          shareSecurityContext: true

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

management:
  server:
    port: 16002
  endpoints:
    web:
      exposure:
        include: "*"
feign:
  hystrix:
    enabled: true
